package qgddfe;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelBase;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

//import java.util.ArrayList;
//import java.util.List;

/**
@brief ????????????
@return ??????????
*/
public class GateKernelGeneratorKernel extends Kernel {

	DFEType dataTypeFix32            = dfeFixOffset(32, -30, SignMode.TWOSCOMPLEMENT);
	DFEType parameterTypeFix32       = dfeFixOffset(32, -25, SignMode.TWOSCOMPLEMENT);
	DFEComplexType cplxTypeFix32     = new DFEComplexType(dataTypeFix32);

	DFEVectorType<DFEComplex> kernelMatrixType = new DFEVectorType<DFEComplex>(cplxTypeFix32, 4);

/**
@brief ????????????
@return ??????????
*/
	// class to store elementary data of a gate operation
	class GateKernelStructTypeCPU extends DFEStructType {
		GateKernelStructTypeCPU() {
			super(sft ( "ThetaOver2", parameterTypeFix32),
			sft ( "Phi", parameterTypeFix32),
			sft ( "Lambda", parameterTypeFix32),
			sft("TargetQubit", dfeUInt(8)),
			sft ( "ControlQubit", dfeInt(8)),
			sft ( "GateType", dfeUInt(8)),
			sft ( "metadata", dfeUInt(8)));
		}
	}

/**
@brief ????????????
@return ??????????
*/
	// class to store elementary data of a gate operation
	class GateKernelStructType extends DFEStructType {
		GateKernelStructType() {
			super(sft ( "KernelMatrix", kernelMatrixType),
			sft(  "TargetQubit", dfeUInt(4)),
			sft ( "ControlQubit", dfeInt(5)),
			sft ( "deriv", dfeUInt(1)));
		}
	}

	GateKernelStructTypeCPU CPUstructType = new GateKernelStructTypeCPU();
	GateKernelStructType DFEstructType = new GateKernelStructType();



/**
@brief ????????????
@return ??????????
*/
	public GateKernelGeneratorKernel(final KernelParameters parameters, int dimMax, int chainedGatesNum, int gatesNumPerKernel, boolean verbose) {
		super(parameters);


		CounterChain chain = control.count.makeCounterChain();
		DFEVar outputControllerCounter = chain.addCounter(chainedGatesNum, 1);
		if ( gatesNumPerKernel > 1 ) {
			DFEVar gateInKernelCounter = chain.addCounter(gatesNumPerKernel, 1);		
		}
		DFEVar dataBatchCounter = chain.addCounter(4, 1);
		
		// Input		
		DFEVar inputDataBatch = io.input("gatesCPU", dfeUInt(32));
		
		// buiuld up higher bitwidth input from batches
		DFEVar dataBatch_hold_0 = Reductions.streamHold(inputDataBatch, dataBatchCounter === 0);
		DFEVar dataBatch_hold_1 = Reductions.streamHold(inputDataBatch, dataBatchCounter === 1);
		DFEVar dataBatch_hold_2 = Reductions.streamHold(inputDataBatch, dataBatchCounter === 2);		
		
		DFEVar inputDataCat = inputDataBatch.cat(dataBatch_hold_2);
		inputDataCat = inputDataCat.cat(dataBatch_hold_1);
		inputDataCat = inputDataCat.cat(dataBatch_hold_0);
					
		final DFEStruct gatesCPU = inputDataCat.reinterpret(CPUstructType);// io.input("gatesCPU", CPUstructType);
		
		
		// create gate matrix kernel

		DFEVector<DFEComplex> kernelMatrix = kernelMatrixType.newInstance(this);

		DFEVar ThetaOver2 = gatesCPU["ThetaOver2"];

		DFEVar cosTheta = KernelMath.cos( ThetaOver2  ).cast(dataTypeFix32);
		DFEVar sinTheta = KernelMath.sin( ThetaOver2  ).cast(dataTypeFix32);

		DFEVar Lambda = gatesCPU["Lambda"];
		DFEVar cosLambda = KernelMath.cos( Lambda  ).cast(dataTypeFix32);
		DFEVar sinLambda = KernelMath.sin( Lambda  ).cast(dataTypeFix32);

		DFEVar Phi    = gatesCPU["Phi"];
		DFEVar cosPhi = KernelMath.cos( Phi  ).cast(dataTypeFix32);
		DFEVar sinPhi = KernelMath.sin( Phi  ).cast(dataTypeFix32);

		DFEVar cosPhiLambda = KernelMath.cos( Phi+Lambda  ).cast(dataTypeFix32);
		DFEVar sinPhiLambda = KernelMath.sin( Phi+Lambda  ).cast(dataTypeFix32);


		// extract boolen metadata to construct correct matrix kernel account for derivate operations as well
		DFEVar metadata = gatesCPU["metadata"];
		DFEVar zeroOutKernelElement_0 = metadata.slice(0).cast(dfeUInt(1));
		DFEVar zeroOutKernelElement_1 = metadata.slice(1).cast(dfeUInt(1));
		DFEVar zeroOutKernelElement_2 = metadata.slice(2).cast(dfeUInt(1));
		DFEVar zeroOutKernelElement_3 = metadata.slice(3).cast(dfeUInt(1));
		DFEVar deriv = metadata.slice(7).cast(dfeUInt(1));
/*
if( verbose ) {	
debug.simPrintf("kernelMatrix: %d, %d, %d, %d, %d\n", metadata, zeroOutKernelElement_3, zeroOutKernelElement_2, zeroOutKernelElement_1, zeroOutKernelElement_0);		
}
*/
		// construct 2x2 complex matrix kernel for gate operations
		kernelMatrix[1].setReal( zeroOutKernelElement_1 ? constant.var( dataTypeFix32, 0) : -cosLambda*sinTheta );
		kernelMatrix[1].setImaginary( zeroOutKernelElement_1 ? constant.var( dataTypeFix32, 0) : -sinLambda*sinTheta );


		//sinTheta = optimization.pipeline( sinTheta );
		kernelMatrix[2].setReal( zeroOutKernelElement_2 ? constant.var( dataTypeFix32, 0) : cosPhi*sinTheta );
		kernelMatrix[2].setImaginary( zeroOutKernelElement_2 ? constant.var( dataTypeFix32, 0) : sinPhi*sinTheta );

		kernelMatrix[3].setReal( zeroOutKernelElement_3 ? constant.var( dataTypeFix32, 0) : cosPhiLambda*cosTheta );
		kernelMatrix[3].setImaginary( zeroOutKernelElement_3 ? constant.var( dataTypeFix32, 0) : sinPhiLambda*cosTheta );
		
/*
		for (int idx=0; idx<7; idx++) {
			cosTheta = optimization.pipeline( cosTheta );
		}
*/
		kernelMatrix[0].setReal( zeroOutKernelElement_0 ? constant.var( dataTypeFix32, 0) : cosTheta );
		kernelMatrix[0].setImaginary( zeroOutKernelElement_0 ? constant.var( dataTypeFix32, 0) : constant.var( dataTypeFix32, 0) );



		DFEVar TargetQubit = gatesCPU["TargetQubit"];
		TargetQubit = TargetQubit.cast(dfeUInt(4));

		DFEVar ControlQubit = gatesCPU["ControlQubit"];
		ControlQubit = ControlQubit.cast(dfeInt(5));
/*		
if( verbose ) {	
debug.simPrintf("%d control : %d, target qubit:%d\n", dataBatchCounter, ControlQubit, TargetQubit);
}		
*/		
//debug.simPrintf("control : %d\n", ControlQubit);
		//DFEVar GateType = gatesCPU["GateType"];
/*
		for (int idx=0; idx<44; idx++) {
			TargetQubit = optimization.pipeline( TargetQubit );
			ControlQubit = optimization.pipeline( ControlQubit );
			GateType = optimization.pipeline( GateType );
		}
*/
/*
DFEVar tmp = KernelMath.cos( Phi  );
tmp = tmp.cast(dataTypeFix32);
debug.simPrintf("tt: %f\n", tmp);

debug.simPrintf("tt: %f, %f\n", -cosLambda*sinTheta, -sinLambda*sinTheta);
debug.simPrintf("tt: %f, %f, %f, %f\n", cosPhi, sinPhi, Phi, KernelMath.cos( Phi  )      );
debug.simPrintf("tt: %f, %f\n", cosPhiLambda*cosTheta, sinPhiLambda*cosTheta);
*/
/*
if( verbose ) {	
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[0].getReal(), kernelMatrix[0].getImaginary());	
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[1].getReal(), kernelMatrix[1].getImaginary());
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[2].getReal(), kernelMatrix[2].getImaginary());
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[3].getReal(), kernelMatrix[3].getImaginary());
}
*/
/*

*/
		DFEStruct gates = DFEstructType.newInstance(this);

                gates["TargetQubit"] =  TargetQubit;
                gates["ControlQubit"] =  ControlQubit;
                gates["KernelMatrix"] =  kernelMatrix;
		gates["deriv"] = deriv; 


		// Outputs
		if ( chainedGatesNum == 1 & gatesNumPerKernel == 1 ) {
			io.output("gatesDFE_0", gates, DFEstructType, dataBatchCounter===3 );
		}
		else if ( chainedGatesNum > 1 & gatesNumPerKernel == 1 ) {
			//DFEVar outputControllerCounter = control.count.simpleCounter(6, chainedGatesNum);
			for (int idx=0; idx<chainedGatesNum; idx++) {
				io.output("gatesDFE_"+String.valueOf(idx), gates, DFEstructType, outputControllerCounter===idx & dataBatchCounter===3);
			}			
		}
		else if ( chainedGatesNum == 1 & gatesNumPerKernel > 1 ) {
			io.output("gatesDFE_0", gates, DFEstructType, dataBatchCounter===3 );		
		}
		else {
			//CounterChain chain = control.count.makeCounterChain();
			//DFEVar outputControllerCounter = chain.addCounter(chainedGatesNum, 1);
			//DFEVar gateInKernelCounter = chain.addCounter(gatesNumPerKernel, 1);
			
/*
if( verbose ) {	
debug.simPrintf("gate output: %d, %d\n", gateInKernelCounter, outputControllerCounter);	
}
*/			
//gates = optimization.limitFanout(gates, 12);	
			
			for (int idx=0; idx<chainedGatesNum; idx++) {
				io.output("gatesDFE_"+String.valueOf(idx), gates, DFEstructType, outputControllerCounter===idx & dataBatchCounter===3);
			}
		}
		
		//
		
		
		
	
		
		
	}

}
