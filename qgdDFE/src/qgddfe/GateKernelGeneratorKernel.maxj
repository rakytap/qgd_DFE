package qgddfe;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelBase;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;

//import java.util.ArrayList;
//import java.util.List;

/**
@brief ????????????
@return ??????????
*/
public class GateKernelGeneratorKernel extends Kernel {

	DFEType dataTypeFix32            = dfeFixOffset(32, -30, SignMode.TWOSCOMPLEMENT);
	DFEType parameterTypeFix32       = dfeFixOffset(32, -25, SignMode.TWOSCOMPLEMENT);
	DFEComplexType cplxTypeFix32     = new DFEComplexType(dataTypeFix32);

	DFEVectorType<DFEComplex> kernelMatrixType = new DFEVectorType<DFEComplex>(cplxTypeFix32, 4);

/**
@brief ????????????
@return ??????????
*/
	// class to store elementary data of a gate operation
	class GateKernelStructTypeCPU extends DFEStructType {
		GateKernelStructTypeCPU() {
			super(sft ( "Theta", parameterTypeFix32),
			sft ( "Phi", parameterTypeFix32),
			sft ( "Lambda", parameterTypeFix32),
			sft("TargetQubit", dfeUInt(8)),
			sft ( "ControlQubit", dfeInt(8)),
			sft ( "GateType", dfeUInt(8)),
			sft ( "padding", dfeUInt(8)));
		}
	}

/**
@brief ????????????
@return ??????????
*/
	// class to store elementary data of a gate operation
	class GateKernelStructType extends DFEStructType {
		GateKernelStructType() {
			super(sft ( "KernelMatrix", kernelMatrixType),
			sft(  "TargetQubit", dfeUInt(4)),
			sft ( "ControlQubit", dfeInt(5)),
			sft ( "GateType", dfeUInt(8)),
			sft ( "deriv", dfeUInt(1)));
		}
	}

	GateKernelStructTypeCPU CPUstructType = new GateKernelStructTypeCPU();
	GateKernelStructType DFEstructType = new GateKernelStructType();



/**
@brief ????????????
@return ??????????
*/
	public GateKernelGeneratorKernel(final KernelParameters parameters, int dimMax) {
		super(parameters);

		// Input
		final DFEStruct gatesCPU = io.input("gatesCPU", CPUstructType);

		DFEVector<DFEComplex> kernelMatrix = kernelMatrixType.newInstance(this);

		DFEVar Theta = gatesCPU["Theta"];

		DFEVar ThetaOver2 = constant.var( dfeInt(1), 0).cat( Theta.slice(1, 31) );
		ThetaOver2 = ThetaOver2.reinterpret(parameterTypeFix32);

		DFEVar cosTheta = KernelMath.cos( ThetaOver2  ).cast(dataTypeFix32);
		DFEVar sinTheta = KernelMath.sin( ThetaOver2  ).cast(dataTypeFix32);

		DFEVar Lambda = gatesCPU["Lambda"];
		DFEVar cosLambda = KernelMath.cos( Lambda  ).cast(dataTypeFix32);
		DFEVar sinLambda = KernelMath.sin( Lambda  ).cast(dataTypeFix32);

		DFEVar Phi    = gatesCPU["Phi"];
		DFEVar cosPhi = KernelMath.cos( Phi  ).cast(dataTypeFix32);
		DFEVar sinPhi = KernelMath.sin( Phi  ).cast(dataTypeFix32);

		DFEVar cosPhiLambda = KernelMath.cos( Phi+Lambda  ).cast(dataTypeFix32);
		DFEVar sinPhiLambda = KernelMath.sin( Phi+Lambda  ).cast(dataTypeFix32);



		kernelMatrix[1].setReal( -cosLambda*sinTheta );
		kernelMatrix[1].setImaginary( -sinLambda*sinTheta );


		//sinTheta = optimization.pipeline( sinTheta );
		kernelMatrix[2].setReal( cosPhi*sinTheta );
		kernelMatrix[2].setImaginary( sinPhi*sinTheta );

		kernelMatrix[3].setReal( cosPhiLambda*cosTheta );
		kernelMatrix[3].setImaginary( sinPhiLambda*cosTheta );
		
/*
		for (int idx=0; idx<7; idx++) {
			cosTheta = optimization.pipeline( cosTheta );
		}
*/
		kernelMatrix[0].setReal( cosTheta );
		kernelMatrix[0].setImaginary( constant.var( dataTypeFix32, 0) );


		DFEVar TargetQubit = gatesCPU["TargetQubit"];
		TargetQubit = TargetQubit.cast(dfeUInt(4));

		DFEVar ControlQubit = gatesCPU["ControlQubit"];
		ControlQubit = ControlQubit.cast(dfeInt(5));
debug.simPrintf("control : %d\n", ControlQubit);
		DFEVar GateType = gatesCPU["GateType"];
/*
		for (int idx=0; idx<44; idx++) {
			TargetQubit = optimization.pipeline( TargetQubit );
			ControlQubit = optimization.pipeline( ControlQubit );
			GateType = optimization.pipeline( GateType );
		}
*/
/*
DFEVar tmp = KernelMath.cos( Phi  );
tmp = tmp.cast(dataTypeFix32);
debug.simPrintf("tt: %f\n", tmp);

debug.simPrintf("tt: %f, %f\n", -cosLambda*sinTheta, -sinLambda*sinTheta);
debug.simPrintf("tt: %f, %f, %f, %f\n", cosPhi, sinPhi, Phi, KernelMath.cos( Phi  )      );
debug.simPrintf("tt: %f, %f\n", cosPhiLambda*cosTheta, sinPhiLambda*cosTheta);
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[0].getReal(), kernelMatrix[0].getImaginary());	
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[1].getReal(), kernelMatrix[1].getImaginary());
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[2].getReal(), kernelMatrix[2].getImaginary());
debug.simPrintf("kernelMatrix: %f, %f\n", kernelMatrix[3].getReal(), kernelMatrix[3].getImaginary());
*/
		DFEStruct gates = DFEstructType.newInstance(this);

                gates["TargetQubit"] =  TargetQubit;
                gates["ControlQubit"] =  ControlQubit;
                gates["GateType"] =  GateType;
                gates["KernelMatrix"] =  kernelMatrix;
		gates["deriv"] = constant.var( dfeUInt(1), 0); 


		// Output
		io.output("gatesDFE", gates, DFEstructType);
	}

}
