package qgddfe;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
//import com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe;
//import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemGlobalConfig;
//import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemConfig;
//import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;

import com.maxeler.platform.max5.manager.ImplementationStrategy;
import com.maxeler.platform.max5.manager.BuildConfig;
//import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.custom.api.ManagerRouting;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;

import com.maxeler.platform.max5.manager.XilinxAlveoU250Manager;
import com.maxeler.conf.base.MaxCompilerBuildConf;

//import com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.StreamMode;
import com.maxeler.platform.max5.manager.SynthesisStrategy;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration.OptimizationOptions;

import java.util.ArrayList;
import java.util.List;
// phys_opt_design -slr_crossing_opt -tns_cleanup

/**
@brief ????????????
@return ??????????
*/
public class qgdDFEManager extends XilinxAlveoU250Manager {

	/// number of maximally supported qubits maximally 10
	int qbit_num_max = 9; 

	/// maximal dimension of the supported unitary
	int dim = qbit_num_max < 10 ? 512 : 1024; //because the depth of BRAM is at least 512, there is no point in selecting less than 9
	int dim_over_2 = dim/2;

	int burstCountOneShot = 100;
	static int chainedGatesNum = 6;
	static int gatesNumPerKernel = 18;
	static int totalGatesInChain = chainedGatesNum*gatesNumPerKernel;

/**
@brief ????????????
@return ??????????
*/
	public static void selectSLR(int slr_index, XilinxAlveoU250Manager owner) {
		XilinxAlveoU250Manager.NamedRegion[] availableRegions = XilinxAlveoU250Manager.NamedRegion.values();
		if (slr_index < 0 || slr_index >= availableRegions.length) {
			throw new IllegalArgumentException();
		}
			owner.pushNamedRegion(availableRegions[slr_index]);
	}

/**
@brief ????????????
@return ??????????
*/
	public static void unselectSLR(XilinxAlveoU250Manager owner) { owner.popRegion(); }
/**
@brief ????????????
@return ??????????
*/
	public static DFELink slrCrossingChain(String name, String suffix, DFELink input, int slrStart, int slrEnd, int regPerX, ManagerRouting owner) //-1 for PCIE
	{

                //the floorplan shows SLR0 for PCIE but MaxCompiler IP always ties the ports to SLR1, meaning only SLR3 is a multi-hop...
                if (slrStart == -1) slrStart = slrEnd == 1 ? 1 : (slrEnd == 0 ? 2 : 0);

		if (owner != null) {
			for (int i = slrStart + (slrEnd >= slrStart ? 1 : -1); slrEnd >= slrStart ? i < slrEnd : i > slrEnd; ) {
				selectSLR(i, (XilinxAlveoU250Manager)owner);
				Fanout fo = owner.fanout(name + "Fanout" + suffix + i);
				unselectSLR((XilinxAlveoU250Manager)owner);
				DFELink inp = fo.getInput();            
				inp.setAdditionalRegisters(regPerX);
				inp <== input;
				input = fo.addOutput(name + "Chain" + suffix + i);
				input.setAdditionalRegisters(regPerX);
				if (slrEnd >= slrStart) i++; else i--;
			}
		} else
			input.setAdditionalRegisters(regPerX * ((slrEnd >= slrStart) ? slrEnd - slrStart : slrStart - slrEnd));
		return input;
	}
	
	
	public static DFELink slrCrossingChainWithClock(String name, String suffix, DFELink input, int slrStart, int slrEnd, int regPerX, ManagerRouting owner, ManagerClock clock) //-1 for PCIE
	{

                //the floorplan shows SLR0 for PCIE but MaxCompiler IP always ties the ports to SLR1, meaning only SLR3 is a multi-hop...
                if (slrStart == -1) slrStart = slrEnd == 1 ? 1 : (slrEnd == 0 ? 2 : 0);

		System.out.print("slrCrossingChainWithClock:\n");

		if (owner != null) {
			for (int i = slrStart + (slrEnd >= slrStart ? 1 : -1); slrEnd >= slrStart ? i < slrEnd : i > slrEnd; ) {
				selectSLR(i, (XilinxAlveoU250Manager)owner);
				Fanout fo = owner.fanout(name + "Fanout" + suffix + i);
				fo.setClock( clock );
				unselectSLR((XilinxAlveoU250Manager)owner);
				DFELink inp = fo.getInput();            
				inp.setAdditionalRegisters(regPerX);
				inp <== input;
				input = fo.addOutput(name + "Chain" + suffix + i);
				input.setAdditionalRegisters(regPerX);

				System.out.print(name + "Fanout" + suffix + i + " -> " + name + "Chain" + suffix + i + "\n");

				if (slrEnd >= slrStart) i++; else i--;

			}
		} else
			input.setAdditionalRegisters(regPerX * ((slrEnd >= slrStart) ? slrEnd - slrStart : slrStart - slrEnd));
		return input;
	}	


/**
@brief ????????????
@return ??????????
*/
	public qgdDFEManager(EngineParameters params) {
		super(params);	

		// parameter to add additional registers for SLR crossing of data streams
		int regPerX = 4;
		int regPerX_LMEM = 5;		
		int regPerX_CPU = 4;
		
//pushFanoutLimit(24);

		KernelConfiguration kernel_conf_general = getCurrentKernelConfig();
		OptimizationOptions kernel_opt_general = kernel_conf_general.optimization;
		kernel_opt_general.setUseGlobalClockLinesRst(true);
		//opt.setUseGlobalClockBuffer(true);
		
		
		//getLMemGlobalConfig().setMemoryFrequency(LMemFrequency.LMEM_1200MHZ);
		getLMemGlobalConfig().setMcpFrequency( 260 ); //220
		
		List<XilinxAlveoU250Manager.NamedRegion> named_region_list = new ArrayList<XilinxAlveoU250Manager.NamedRegion>();
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR0 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR1 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR2 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR3 );						
		
		
		List<KernelBlock> kernel_list = new ArrayList<KernelBlock>();	
		
		// slow clock region for gate and memory address generators
		ManagerClock slowClock = generateStaticClock("slowClock", 150);
		ManagerClock memoryClock = generateStaticClock("memoryClock", 250);	

                // kernels to split input data comming from CPU to SLRs
		pushNamedRegion(named_region_list[1]);
		KernelBlock gateDataSplitKernel = addKernel(new GateDataSplitKernel(makeKernelParameters("GateDataSplitKernel") ) );
		gateDataSplitKernel.setClock( slowClock );
		DFELink gatesDataCPU = gateDataSplitKernel.getInput( "gatesDataCPU" );
		gatesDataCPU.setAdditionalRegisters(regPerX);
		DFELink gatesfromcpu = addStreamFromCPU("gatesfromcpu");
		gatesfromcpu.setAdditionalRegisters(regPerX);
		gatesDataCPU <== gatesfromcpu;

		
		
		Fanout inputSplitter = fanout("inputSplitFanout");
		inputSplitter.setClock( slowClock );
		DFELink fromCPU = addStreamFromCPU("fromcpu");
		fromCPU.setAdditionalRegisters(regPerX);	
		DFELink inputSplitterStream = inputSplitter.getInput();
		inputSplitterStream.setAdditionalRegisters(regPerX);	
		inputSplitterStream <== fromCPU;


		KernelBlock traceMergeKernel = addKernel(new TraceMergeKernel(makeKernelParameters("TraceMergeKernel") ) );
		traceMergeKernel.setClock( slowClock );
		DFELink mergedTrace = traceMergeKernel.getOutput( "trace" );
		mergedTrace.setAdditionalRegisters(regPerX);
		DFELink trace2cpu = addStreamToCPU("trace2cpu");
		trace2cpu.setAdditionalRegisters(regPerX);
		trace2cpu <== mergedTrace;

		popRegion();				
		
		// Iteration over SLR binding
		for( int idx=0; idx<4; idx++) {
		
			// binding to the given SLR
			pushNamedRegion(named_region_list[idx]);


			// create memory interface			
			LMemInterface iface = addLMemInterface("LMEMiface_"+String.valueOf(idx), named_region_list[idx]);

	                /////////////////// CPU - LMEM communication ///////////////////////
			KernelBlock mcg_cpu2lmem_kernel = addKernel(new MemCommGeneratorKernel(makeKernelParameters("CPU2LMEMCommGenKernel_"+String.valueOf(idx)), 1, 1, burstCountOneShot, false));
			mcg_cpu2lmem_kernel.setClock( slowClock );


			KernelBlock mcg_fromlmem_kernel = addKernel(new MemCommGeneratorKernel(makeKernelParameters("FromLMEMCommGenKernel_"+String.valueOf(idx)), 0, 1, burstCountOneShot, idx==0));
			KernelBlock mcg_tolmem_kernel = addKernel(new MemCommGeneratorKernel(makeKernelParameters("ToLMEMCommGenKernel_"+String.valueOf(idx)), 1, 0, burstCountOneShot, false));
			mcg_fromlmem_kernel.setClock( memoryClock );
			mcg_tolmem_kernel.setClock( memoryClock );


			DFELink cpu2lmem = iface.addStreamToLMem("cpu2lmem_"+String.valueOf(idx), mcg_cpu2lmem_kernel.getOutput("cmdStream"));
			
			
			DFELink FromFanout = inputSplitter.addOutput( "fromFanout_"+String.valueOf(idx));
			FromFanout.setAdditionalRegisters(regPerX_CPU);
			
			popRegion();
			FromFanout = slrCrossingChainWithClock("inputfromcpu", Integer.toString(idx), FromFanout, -1, idx, regPerX, this, slowClock);		
			pushNamedRegion(named_region_list[idx]);
			
			cpu2lmem.setAdditionalRegisters(regPerX_LMEM-1);			
			cpu2lmem <== FromFanout;
	
			
			
			/////////////////// Computing kernels ///////////////////////				

			// add gate kernel generator kernels
			KernelBlock gateKernel = addKernel(new GateKernelGeneratorKernel(makeKernelParameters("GateKernelGeneratorKernel_"+String.valueOf(idx)), dim, chainedGatesNum, gatesNumPerKernel, idx==0)); 
			gateKernel.setClock( slowClock );
			
			// split CPU-incomming gate data 
			DFELink gatesFromCPU = gateDataSplitKernel.getOutput("gatesDataCPUchunk_"+String.valueOf(idx)); 
			gatesFromCPU.setAdditionalRegisters(regPerX);
			popRegion();
			gatesFromCPU = slrCrossingChainWithClock("gatesfromcpu", Integer.toString(idx), gatesFromCPU, -1, idx, regPerX, this, slowClock);		
			//gatesFromCPU = slrCrossingChain("gatesfromcpu", Integer.toString(idx), gatesFromCPU, -1, idx, regPerX, this);					
			pushNamedRegion(named_region_list[idx]);

			DFELink gatesCPU = gateKernel.getInput("gatesCPU");	
			gatesCPU.setAdditionalRegisters(regPerX);
			gatesCPU <== gatesFromCPU;
			
			
			// gate computing kernels
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {

				KernelConfiguration kernel_conf_gate;
				// custom kernel configuration setting according to timing report
				kernel_conf_gate = new KernelConfiguration(kernel_conf_general);
				OptimizationOptions kernel_opt_gate = kernel_conf_gate.optimization;
				kernel_opt_gate.setCEPipelining( kernel_opt_gate.getCEPipelining() + 1 );
				
				String name = "qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx);
				kernel_list.add( addKernel(new qgdDFEKernel(makeKernelParameters(name, kernel_conf_gate), qbit_num_max, gatesNumPerKernel, gate_idx==chainedGatesNum-1, idx==0) ) );
			}
		

			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {
				DFELink gatesDFE = gateKernel.getOutput("gatesDFE_"+String.valueOf(gate_idx));
				gatesDFE.setAdditionalRegisters(regPerX+gate_idx);

				DFELink gatesInput = kernel_list[idx*chainedGatesNum+gate_idx].getInput("gates");
				gatesInput.setAdditionalRegisters(regPerX+gate_idx);
				gatesInput <== gatesDFE;
			}
					
			
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {

				if ( gate_idx==0 ) {
					DFELink inA = iface.addStreamFromLMem("inA_"+String.valueOf(idx), mcg_fromlmem_kernel.getOutput("cmdStream"));
					inA.setAdditionalRegisters(regPerX_LMEM);
					DFELink x = kernel_list[idx*chainedGatesNum].getInput("x");
					x.setAdditionalRegisters(regPerX_LMEM);
					x <== inA;
				}
				else{
					DFELink outDFEKernel = kernel_list[idx*chainedGatesNum+gate_idx-1].getOutput("y");
					outDFEKernel.setAdditionalRegisters(regPerX);

					DFELink x = kernel_list[idx*chainedGatesNum+gate_idx].getInput("x");
					x.setAdditionalRegisters(regPerX);
					x <== outDFEKernel;

				}


				if ( gate_idx==chainedGatesNum-1 ) {
					DFELink outA = iface.addStreamToLMem("outA_"+String.valueOf(idx), mcg_tolmem_kernel.getOutput("cmdStream"));
					outA.setAdditionalRegisters(regPerX_LMEM);
					DFELink y = kernel_list[idx*chainedGatesNum+gate_idx].getOutput("y");
					y.setAdditionalRegisters(regPerX_LMEM);
                			outA <== y;

					DFELink trace2merge = traceMergeKernel.getInput( "trace_"+String.valueOf(idx));
					trace2merge.setAdditionalRegisters(regPerX_CPU);
					//DFELink trace2cpu = addStreamToCPU("trace2cpu_"+String.valueOf(idx));//, StreamMode.LOW_LATENCY_ENABLED);
					//trace2cpu.setAdditionalRegisters(regPerX_CPU);

					DFELink trace = kernel_list[idx*chainedGatesNum+gate_idx].getOutput("trace");				
					trace.setAdditionalRegisters(regPerX);

					popRegion();
					trace = slrCrossingChainWithClock("trace2cpu", Integer.toString(idx), trace, idx, -1, regPerX, this, slowClock);		
					//gatesFromCPU = slrCrossingChain("gatesfromcpu", Integer.toString(idx), gatesFromCPU, -1, idx, regPerX, this);					
					pushNamedRegion(named_region_list[idx]);


					trace2merge <== trace;
					//trace2cpu <== trace;
				}

			}							
			
			popRegion();


		}

					
                
		




	}
	
/**
@brief ???????????
@param  
*/
	static EngineInterface interfaceDefault () {

		EngineInterface ei = new EngineInterface();

		
		InterfaceParam rows         = ei.addParam("rows", CPUTypes.UINT32);
		InterfaceParam cols         = ei.addParam("cols", CPUTypes.UINT32);
		InterfaceParam size         = rows*cols;
		InterfaceParam gatesNum     = ei.addParam("gatesNum", CPUTypes.UINT16);

		InterfaceParam gateSetNum   = ei.addParam("gateSetNum", CPUTypes.UINT64);

		// setting scalar data in kernels
		for( int idx=0; idx<4; idx++) {
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {
				ei.setScalar("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), "rows", rows);
				ei.setScalar("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), "elementNum", size);

				if( gate_idx==chainedGatesNum-1) {
					ei.setScalar("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), "IterationNum", gatesNum/chainedGatesNum/gatesNumPerKernel);
					ei.setScalar("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), "GateSetNum", gateSetNum);
					ei.setScalar("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), "cols", cols);
				}
			}
		}

		// the overall size of the matrix
		InterfaceParam sizeInBytes = size * 2*CPUTypes.FLOAT.sizeInBytes();

		// starting address of LMEM
		InterfaceParam zero = ei.addConstant(0l);
		
		// set parameters for the address generator kernel
		InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM

		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		int LMEMtimeScale = 2;
		
		InterfaceParam ticksMax = burstNum*chunks*gatesNum*gateSetNum/chainedGatesNum/gatesNumPerKernel;

		// setting scalar data in kernels
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "dynAddrOffsetMax", burstNum*(gateSetNum-1));
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks/LMEMtimeScale);
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);

			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "dynAddrOffsetMax", burstNum*(gateSetNum-1));
			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks/LMEMtimeScale);
			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
		}

		// set ticks of the kernels
		for( int idx=0; idx<4; idx++) {
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {
				ei.setTicks("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), ticksMax);
			}
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), ticksMax/LMEMtimeScale);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), ticksMax/LMEMtimeScale);
			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("GateKernelGeneratorKernel_"+String.valueOf(idx), gatesNum*gateSetNum*4);	
		}

		ei.setTicks("TraceMergeKernel", 3*gateSetNum);	
		ei.setTicks("GateDataSplitKernel", gatesNum*gateSetNum*4);	

        // set size of I/O streams
		ei.setStream("trace2cpu", CPUTypes.INT64, 3*4*gateSetNum*CPUTypes.INT64.sizeInBytes());


		// set triggering memory interruption signal
		for( int idx=0; idx<4; idx++) {
			ei.setLMemInterruptOn("outA_"+String.valueOf(idx));
		}		


		for( int idx=0; idx<4; idx++) {
			ei.ignoreLMem("inA_"+String.valueOf(idx));
		}
		
		ei.ignoreStream("fromcpu");					

		for( int idx=0; idx<4; idx++) {
			ei.ignoreKernel("CPU2LMEMCommGenKernel_"+String.valueOf(idx));
			ei.ignoreLMem("cpu2lmem_"+String.valueOf(idx));	
		}

		ei.route("trace2cpuFanout30 -> trace2cpuChain30, trace2cpuFanout31 -> trace2cpuChain31, trace2cpuFanout32 -> trace2cpuChain32, gatesfromcpuFanout32 -> gatesfromcpuChain32, gatesfromcpuFanout31 -> gatesfromcpuChain31, inputfromcpuFanout32 -> inputfromcpuChain32, inputfromcpuFanout31 -> inputfromcpuChain31, trace2cpuFanout20 -> trace2cpuChain20, trace2cpuFanout21 -> trace2cpuChain21, gatesfromcpuFanout21 -> gatesfromcpuChain21, inputfromcpuFanout21 -> inputfromcpuChain21, trace2cpuFanout10 -> trace2cpuChain10, gatesfromcpuFanout01 -> gatesfromcpuChain01, inputfromcpuFanout01 -> inputfromcpuChain01, inputSplitFanout -> fromFanout_0, inputSplitFanout -> fromFanout_1, inputSplitFanout -> fromFanout_2, inputSplitFanout -> fromFanout_3");		

		return ei ;
	}	
	
	
/**
@brief ???????????
@param  
*/
	static EngineInterface interfaceWrite(String name) {
		EngineInterface ei = new EngineInterface(name);

		// The number of comnponents in the wave-vector 
		InterfaceParam size  = ei.addParam("element_num", CPUTypes.INT32);
	
		// the overall size of the matrix
		InterfaceParam sizeInBytes = size * CPUTypes.FLOAT.sizeInBytes();

		// starting address of LMEM
		InterfaceParam zero = ei.addConstant(0l);

		ei.setStream("fromcpu", CPUTypes.VOID, sizeInBytes );

		// set parameters for the address generator kernel
		InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM

		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		chunks = chunks/2; // in order to half down the operating frequency, only counting to the half of the number of chunks
		InterfaceParam ticksMax = burstNum*chunks;
		
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "dynAddrOffsetMax", ei.addConstant(0l));
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
		


			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), ticksMax);//ei.addConstant(1));
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), zero);
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {
				ei.setTicks("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), zero);
			}
			ei.setTicks("GateKernelGeneratorKernel_"+String.valueOf(idx), zero);			
		}

		ei.setTicks("TraceMergeKernel", zero);	
		ei.setTicks("GateDataSplitKernel", zero);	

		ei.setLMemInterruptOn("cpu2lmem_0");
		
		ei.route("trace2cpuFanout30 -> trace2cpuChain30, trace2cpuFanout31 -> trace2cpuChain31, trace2cpuFanout32 -> trace2cpuChain32, gatesfromcpuFanout32 -> gatesfromcpuChain32, gatesfromcpuFanout31 -> gatesfromcpuChain31, inputfromcpuFanout32 -> inputfromcpuChain32, inputfromcpuFanout31 -> inputfromcpuChain31, trace2cpuFanout20 -> trace2cpuChain20, trace2cpuFanout21 -> trace2cpuChain21, gatesfromcpuFanout21 -> gatesfromcpuChain21, inputfromcpuFanout21 -> inputfromcpuChain21, trace2cpuFanout10 -> trace2cpuChain10, gatesfromcpuFanout01 -> gatesfromcpuChain01, inputfromcpuFanout01 -> inputfromcpuChain01, inputSplitFanout -> fromFanout_0, inputSplitFanout -> fromFanout_1, inputSplitFanout -> fromFanout_2, inputSplitFanout -> fromFanout_3");				

		ei.ignoreAll(Direction.IN_OUT);

                // With custom memory address commenad generators it is needed to ignore other LMEM streams!!!!!!!!!!!!!!!!!!!!!
		for( int idx=0; idx<4; idx++) {                
			ei.ignoreLMem("inA_"+String.valueOf(idx));
			ei.ignoreLMem("outA_"+String.valueOf(idx));
		}


		return ei;
	}


/**
@brief ???????????
@param  
*/
/*
	static EngineInterface interfaceRead(String name) {
		EngineInterface ei = new EngineInterface(name);

		// The number of comnponents in the wave-vector 
		InterfaceParam size  = ei.addParam("element_num", CPUTypes.INT32);

		// the overall size of the matrix
		InterfaceParam sizeInBytes = size * CPUTypes.FLOAT.sizeInBytes();

                // starting address of LMEM
		//InterfaceParam zero = ei.addConstant(0l);

		for( int idx=0; idx<4; idx++) {
			ei.setStream("tocpu_"+String.valueOf(idx), CPUTypes.VOID, sizeInBytes);
		}

                // set parameters for the address generator kernel
                InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM
		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		InterfaceParam ticksMax = burstNum*chunks;
		
		InterfaceParam zero = ei.addConstant(0l);	
	
		
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "IterationNum", ei.addConstant(1l));
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "addrOffset", burstNum);
//			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "addrOffset", zero);	
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
		


			ei.setTicks("LMEM2CPUCommGenKernel_"+String.valueOf(idx), ticksMax);
			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), zero);
			for (int gate_idx=0; gate_idx<chainedGatesNum; gate_idx++) {
				ei.setTicks("qgdDFEKernel_"+String.valueOf(idx)+"_"+String.valueOf(gate_idx), zero);
			}
			ei.setTicks("GateKernelGeneratorKernel_"+String.valueOf(idx), zero);
		}
		
		



		ei.setLMemInterruptOn("lmem2cpu_0");

		ei.ignoreAll(Direction.IN_OUT);

               // With custom memory address commenad generators it is needed to ignore other LMEM streams!!!!!!!!!!!!!!!!!!!!!
                
		for( int idx=0; idx<4; idx++) {                
			ei.ignoreLMem("cpu2lmem_"+String.valueOf(idx));
			ei.ignoreLMem("inA_"+String.valueOf(idx));
			ei.ignoreLMem("outA_"+String.valueOf(idx));
		}
		

		return ei;
	}
*/	
		
/**
@brief ???????????
@param  
*/
	public static void main(final String[] argv) {		
		final EngineParameters params = new EngineParameters(argv);
		final qgdDFEManager manager = new qgdDFEManager(params);

		BuildConfig conf = manager.getBuildConfig();

		conf.setOptimizationGoal(BuildConfig.OptimizationGoal.SPEED);
        	conf.setBuildEffort(BuildConfig.Effort.HIGH);
	        //conf.setImplementationNearMissRetries(1);
        	//conf.setImplementationNearMissThreshold(10000); //0-1000000 are considered within threshold for build success on MAX5
//conf.setBramMappingScaleFactor(0.5);
/*
		conf.setSynthesisStrategy( Utility.getHighPerfSynthStrategy()); //SynthesisStrategy.FLOW_PERF_OPTIMIZED_HIGH);

	        //Inspect output timing scores and rank from best to worst
		boolean isProbe = false;
	        conf.setImplementationStrategies(Utility.chooseImplementationStrategies(false, isProbe));
	        conf.setParallelism(6);
*/
		conf.setImplementationStrategies( ImplementationStrategy.MAXELER4, 
						ImplementationStrategy.MAXELER3);
		conf.setSynthesisStrategy( SynthesisStrategy.FLOW_PERF_OPTIMIZED_HIGH );
		conf.setParallelism( 64 );

		manager.setDefaultStreamClockFrequency(350);
		



		manager.createSlicInterface(qgdDFEManager.interfaceDefault());
		manager.createSlicInterface(qgdDFEManager.interfaceWrite("writeLMem"));
//		manager.createSlicInterface(qgdDFEManager.interfaceRead("readLMem"));
		manager.getBuildManager().setParameter(MaxCompilerBuildConf.build.clean_build_directory, false); //problematic for successful builds, but failed builds which have a timing score will get deleted...can manually delete dcp checkpoint files instead
		
		manager.addMaxFileConstant("CHAINED_GATES_NUM", qgdDFEManager.totalGatesInChain);	
		
		manager.build();
	}

}
