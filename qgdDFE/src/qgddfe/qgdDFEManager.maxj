package qgddfe;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
//import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;

import com.maxeler.platform.max5.manager.ImplementationStrategy;
import com.maxeler.platform.max5.manager.BuildConfig;
//import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;

import com.maxeler.platform.max5.manager.XilinxAlveoU250Manager;

import java.util.ArrayList;
import java.util.List;

/**
@brief ????????????
@return ??????????
*/
public class qgdDFEManager extends XilinxAlveoU250Manager {

	int dim = 1024;
	int dim_over_2 = dim/2;


/**
@brief ????????????
@return ??????????
*/
	public qgdDFEManager(EngineParameters params) {
		super(params);

		// parameter to add additional registers for SLR crossing of data streams
		int regPerX = 2;
		
		//getLMemGlobalConfig().setMemoryFrequency(LMemFrequency.LMEM_1200MHZ);
		getLMemGlobalConfig().setMcpFrequency( 250 ); //220
		
		List<XilinxAlveoU250Manager.NamedRegion> named_region_list = new ArrayList<XilinxAlveoU250Manager.NamedRegion>();
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR0 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR1 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR2 );
		named_region_list.add( XilinxAlveoU250Manager.NamedRegion.SLR3 );						
		
		List<LMemInterface> iface_list = new ArrayList<LMemInterface>();
		for( int idx=0; idx<4; idx++) {
			iface_list.add( addLMemInterface("LMEMiface_"+String.valueOf(idx), named_region_list[idx]) );
		}					

                /////////////////// CPU - LMEM communication ///////////////////////

                // memory command gererator kernels (mcg)
		List<KernelBlock> mcg_cpu2lmem_kernel_list = new ArrayList<KernelBlock>();
		List<KernelBlock> mcg_lmem2cpu_kernel_list = new ArrayList<KernelBlock>();
		for (int idx=0; idx<4; idx++) {
			mcg_cpu2lmem_kernel_list.add( addKernel(new MemCommGeneratorKernel(makeKernelParameters("CPU2LMEMCommGenKernel_"+String.valueOf(idx)), 1, 0)) );
			mcg_lmem2cpu_kernel_list.add( addKernel(new MemCommGeneratorKernel(makeKernelParameters("LMEM2CPUCommGenKernel_"+String.valueOf(idx)), 1, 0)) );
		}
		
		for (int idx=0; idx<4; idx++) {		
		
			assignToNamedRegion(mcg_cpu2lmem_kernel_list[idx], named_region_list[idx]);
			assignToNamedRegion(mcg_lmem2cpu_kernel_list[idx], named_region_list[idx]);	
			
		}		
		
		
		List<KernelBlock> mcg_fromlmem_kernel_list = new ArrayList<KernelBlock>();
		List<KernelBlock> mcg_tolmem_kernel_list = new ArrayList<KernelBlock>();
		for (int idx=0; idx<4; idx++) {	
			mcg_fromlmem_kernel_list.add( addKernel(new MemCommGeneratorKernel(makeKernelParameters("FromLMEMCommGenKernel_"+String.valueOf(idx)), 0, 1)) );
			mcg_tolmem_kernel_list.add( addKernel(new MemCommGeneratorKernel(makeKernelParameters("ToLMEMCommGenKernel_"+String.valueOf(idx)), 1, 0)) );
		}
		
		for (int idx=0; idx<4; idx++) {	
			assignToNamedRegion(mcg_fromlmem_kernel_list[idx], named_region_list[idx]);
			assignToNamedRegion(mcg_tolmem_kernel_list[idx], named_region_list[idx]);
		}


		List<DFELink> cpu2lmem_list = new ArrayList<DFELink>();
		for( int idx=0; idx<4; idx++) {
			cpu2lmem_list.add( iface_list[idx].addStreamToLMem("cpu2lmem_"+String.valueOf(idx), mcg_cpu2lmem_kernel_list[idx].getOutput("cmdStream")) );
		}


		List<DFELink> lmem2cpu_list = new ArrayList<DFELink>();
		for( int idx=0; idx<4; idx++) {
			lmem2cpu_list.add( iface_list[idx].addStreamFromLMem("lmem2cpu_"+String.valueOf(idx), mcg_lmem2cpu_kernel_list[idx].getOutput("cmdStream")) );
		}
		
		for( int idx=0; idx<4; idx++) {
			cpu2lmem_list[idx] <== addStreamFromCPU("fromcpu_"+String.valueOf(idx));
			addStreamToCPU("tocpu_"+String.valueOf(idx)) <== lmem2cpu_list[idx];
		}				

                /////////////////// Computing kernels ///////////////////////

		final KernelBlock gateKernel = addKernel(new GateKernelGeneratorKernel(makeKernelParameters("GateKernelGeneratorKernel"), dim));
		assignToNamedRegion(gateKernel, XilinxAlveoU250Manager.NamedRegion.SLR0);


		DFELink gatesFromCPU = addStreamFromCPU("gatesfromcpu");
		gateKernel.getInput("gatesCPU") <== gatesFromCPU;
           


		List<KernelBlock> kernel_list = new ArrayList<KernelBlock>();
		for(int idx=0; idx<4; idx++) {
			kernel_list.add( addKernel(new qgdDFEKernel(makeKernelParameters("qgdDFEKernel_"+String.valueOf(idx)), dim)) );
		}

		for(int idx=0; idx<4; idx++) {		
			assignToNamedRegion(kernel_list[idx] , named_region_list[idx]);
		}

         
		for(int idx=0; idx<4; idx++) {
			DFELink gatesDFE = gateKernel.getOutput("gatesDFE_"+String.valueOf(idx));
			gatesDFE.setAdditionalRegisters((idx+1) * regPerX);
			DFELink gatesInput = kernel_list[idx].getInput("gates");
			gatesInput.setAdditionalRegisters((idx+1) * regPerX);
			gatesInput <== gatesDFE;
		}
		

		for(int idx=0; idx<4; idx++) {
			DFELink inA = iface_list[idx].addStreamFromLMem("inA_"+String.valueOf(idx), mcg_fromlmem_kernel_list[idx].getOutput("cmdStream"));
			inA.setAdditionalRegisters(regPerX);
			DFELink x = kernel_list[idx].getInput("x");
			x.setAdditionalRegisters(regPerX);
			x <== inA;

			DFELink outA = iface_list[idx].addStreamToLMem("outA_"+String.valueOf(idx), mcg_tolmem_kernel_list[idx].getOutput("cmdStream"));
			outA.setAdditionalRegisters(regPerX);
			DFELink y = kernel_list[idx].getOutput("y");
			y.setAdditionalRegisters(regPerX);
                	outA <== y;
		}




	}
	
/**
@brief ???????????
@param  
*/
	static EngineInterface interfaceDefault () {

		EngineInterface ei = new EngineInterface();

                // The number of comnponents in the wave-vector 
		InterfaceParam size  = ei.addParam("element_num", CPUTypes.INT32);
		InterfaceParam controlQubit = ei.addParam("controlQubit", CPUTypes.INT32);
		InterfaceParam targetQubit  = ei.addParam("targetQubit", CPUTypes.INT32);
		InterfaceParam dim          = ei.addParam("dim", CPUTypes.INT32);
		InterfaceParam gatesNum     = ei.addParam("gatesNum", CPUTypes.INT16);

		for( int idx=0; idx<4; idx++) {
			ei.setScalar("qgdDFEKernel_"+String.valueOf(idx), "dim", dim);
			ei.setScalar("qgdDFEKernel_"+String.valueOf(idx), "elementNum", dim*dim);
		}

                // the overall size of the matrix
		InterfaceParam sizeInBytes = size * 2*CPUTypes.FLOAT.sizeInBytes();

                // starting address of LMEM
		InterfaceParam zero = ei.addConstant(0l);
//ei.setLMemLinear("inA", zero, sizeInBytes);
//ei.setLMemLinear("outA", sizeInBytes, sizeInBytes);
		
		// set parameters for the address generator kernel
		InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM

		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		InterfaceParam ticksMax = burstNum*chunks*gatesNum;
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "IterationNum", gatesNum);
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "addrOffset", zero);
			ei.setScalar("FromLMEMCommGenKernel_"+String.valueOf(idx), "dynAddrOffset", burstNum);

			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "IterationNum", gatesNum);
			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
			ei.setScalar("ToLMEMCommGenKernel_"+String.valueOf(idx), "addrOffset", burstNum);
		}

		//ei.setTicks("paramKernel", ei.addConstant(1l));

		ei.setTicks("GateKernelGeneratorKernel", gatesNum);
		for( int idx=0; idx<4; idx++) {
			ei.setTicks("qgdDFEKernel_"+String.valueOf(idx), ticksMax);
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), ticksMax);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), ticksMax);
			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("LMEM2CPUCommGenKernel_"+String.valueOf(idx), zero);
		}

		for( int idx=0; idx<4; idx++) {
			ei.setLMemInterruptOn("outA_"+String.valueOf(idx));
		}		

		//ei.setLMemInterruptOn("inA");	



		for( int idx=0; idx<4; idx++) {
			ei.ignoreLMem("inA_"+String.valueOf(idx));
		}
		//ei.ignoreLMem("outA");

		for( int idx=0; idx<4; idx++) {
			ei.ignoreKernel("CPU2LMEMCommGenKernel_"+String.valueOf(idx));
			ei.ignoreKernel("LMEM2CPUCommGenKernel_"+String.valueOf(idx));
			
			ei.ignoreStream("tocpu_"+String.valueOf(idx));		
			ei.ignoreStream("fromcpu_"+String.valueOf(idx));
			ei.ignoreLMem("cpu2lmem_"+String.valueOf(idx));
			ei.ignoreLMem("lmem2cpu_"+String.valueOf(idx));			
		}


		return ei ;
	}	
	
	
/**
@brief ???????????
@param  
*/
	static EngineInterface interfaceWrite(String name) {
		EngineInterface ei = new EngineInterface(name);

		// The number of comnponents in the wave-vector 
		InterfaceParam size  = ei.addParam("element_num", CPUTypes.INT32);
	
		// the overall size of the matrix
		InterfaceParam sizeInBytes = size * CPUTypes.FLOAT.sizeInBytes();

                // starting address of LMEM
		InterfaceParam zero = ei.addConstant(0l);

		for( int idx=0; idx<4; idx++) {
			ei.setStream("fromcpu_"+String.valueOf(idx), CPUTypes.VOID, sizeInBytes );
		}


		// set parameters for the address generator kernel
		InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM

		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		InterfaceParam ticksMax = burstNum*chunks;
		
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "IterationNum", ei.addConstant(1l));
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
			ei.setScalar("CPU2LMEMCommGenKernel_"+String.valueOf(idx), "addrOffset", zero);
		


			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), ticksMax);//ei.addConstant(1));
			ei.setTicks("LMEM2CPUCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("qgdDFEKernel_"+String.valueOf(idx), zero);
		}

		ei.setTicks("GateKernelGeneratorKernel", zero);

		ei.setLMemInterruptOn("cpu2lmem_0");

		ei.ignoreAll(Direction.IN_OUT);

                // With custom memory address commenad generators it is needed to ignore other LMEM streams!!!!!!!!!!!!!!!!!!!!!
		for( int idx=0; idx<4; idx++) {                
			ei.ignoreLMem("lmem2cpu_"+String.valueOf(idx));
			ei.ignoreLMem("inA_"+String.valueOf(idx));
			ei.ignoreLMem("outA_"+String.valueOf(idx));
		}


		return ei;
	}


/**
@brief ???????????
@param  
*/
	static EngineInterface interfaceRead(String name) {
		EngineInterface ei = new EngineInterface(name);

		// The number of comnponents in the wave-vector 
		InterfaceParam size  = ei.addParam("element_num", CPUTypes.INT32);

		// the overall size of the matrix
		InterfaceParam sizeInBytes = size * CPUTypes.FLOAT.sizeInBytes();

                // starting address of LMEM
		//InterfaceParam zero = ei.addConstant(0l);

		for( int idx=0; idx<4; idx++) {
			ei.setStream("tocpu_"+String.valueOf(idx), CPUTypes.VOID, sizeInBytes);
		}

                // set parameters for the address generator kernel
                InterfaceParam burstSize = ei.addConstant(64);  //for single DIMM
		InterfaceParam burstNum = sizeInBytes/burstSize;
		InterfaceParam chunks = burstSize/(CPUTypes.FLOAT.sizeInBytes()*2);
		InterfaceParam ticksMax = burstNum*chunks;
		
		InterfaceParam zero = ei.addConstant(0l);	
	
		
		for( int idx=0; idx<4; idx++) {
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "IterationNum", ei.addConstant(1l));
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "burstNum", burstNum);
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "addrOffset", burstNum);
//			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "addrOffset", zero);	
			ei.setScalar("LMEM2CPUCommGenKernel_"+String.valueOf(idx), "chunkNum", chunks);
		


			ei.setTicks("LMEM2CPUCommGenKernel_"+String.valueOf(idx), ticksMax);
			ei.setTicks("CPU2LMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("FromLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("ToLMEMCommGenKernel_"+String.valueOf(idx), zero);
			ei.setTicks("qgdDFEKernel_"+String.valueOf(idx), zero);
		}
		
		

		ei.setTicks("GateKernelGeneratorKernel", zero);

		ei.setLMemInterruptOn("lmem2cpu_0");

		ei.ignoreAll(Direction.IN_OUT);

               // With custom memory address commenad generators it is needed to ignore other LMEM streams!!!!!!!!!!!!!!!!!!!!!
                
		for( int idx=0; idx<4; idx++) {                
			ei.ignoreLMem("cpu2lmem_"+String.valueOf(idx));
			ei.ignoreLMem("inA_"+String.valueOf(idx));
			ei.ignoreLMem("outA_"+String.valueOf(idx));
		}
		

		return ei;
	}
	
		
/**
@brief ???????????
@param  
*/
	public static void main(final String[] argv) {		
		final EngineParameters params = new EngineParameters(argv);
		final qgdDFEManager manager = new qgdDFEManager(params);

		BuildConfig conf = manager.getBuildConfig();
/*
		conf.setImplementationStrategies(  	ImplementationStrategy.CONGESTION_SPREAD_LOGIC_HIGH,
 							ImplementationStrategy.CONGESTION_SPREAD_LOGIC_MEDIUM,
							ImplementationStrategy.VIVADO_DEFAULT, 
							ImplementationStrategy.MAXELER3,  
							ImplementationStrategy.PERFORMANCE_WL_BLOCK_PLACEMENT_FANOUT_OPT, 
							ImplementationStrategy.PERFORMANCE_NET_DELAY_HIGH );
*/
		conf.setImplementationStrategies(  ImplementationStrategy.VIVADO_DEFAULT,
				   		    ImplementationStrategy.CONGESTION_SPREAD_LOGIC_HIGH );
		conf.setParallelism( 64 );

		manager.setDefaultStreamClockFrequency(350);



		manager.createSlicInterface(qgdDFEManager.interfaceDefault());
		manager.createSlicInterface(qgdDFEManager.interfaceWrite("writeLMem"));
		manager.createSlicInterface(qgdDFEManager.interfaceRead("readLMem"));

		
		manager.build();
	}

}
